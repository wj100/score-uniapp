{"version":3,"file":"storage.js","sources":["utils/storage.js"],"sourcesContent":["/**\n * uniCloud云函数存储工具类\n */\n\n// 调用云函数的通用方法\nasync function callCloudFunction(action, data = {}, params = {}) {\n  try {\n    const result = await uniCloud.callFunction({\n      name: 'badminton-api',\n      data: {\n        action,\n        data,\n        params\n      }\n    })\n    \n    if (result.result.code === 0) {\n      return result.result.data\n    } else {\n      console.error('云函数调用失败:', result.result.message)\n      throw new Error(result.result.message)\n    }\n  } catch (error) {\n    console.error('云函数调用异常:', error)\n    throw error\n  }\n}\n\n// 获取队员列表\nexport async function getPlayers() {\n  const maxRetries = 3;\n  let lastError = null;\n  \n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      console.log(`调用云函数获取队员列表... (第${i + 1}次尝试)`)\n      const result = await uniCloud.callFunction({\n        name: 'badminton-api',\n        data: {\n          action: 'getPlayers'\n        }\n      })\n      \n      console.log('云函数返回结果:', result)\n      \n      if (result.result.code === 0) {\n        const players = result.result.data.map(player => player.name)\n        console.log('解析后的队员列表:', players)\n        return players\n      } else {\n        console.error('获取队员列表失败:', result.result.message)\n        lastError = new Error(result.result.message);\n        \n        // 如果是数据库资源耗尽错误，等待后重试\n        if (result.result.message && result.result.message.includes('资源耗尽')) {\n          if (i < maxRetries - 1) {\n            console.log(`数据库资源耗尽，等待 ${(i + 1) * 2} 秒后重试...`);\n            await new Promise(resolve => setTimeout(resolve, (i + 1) * 2000));\n            continue;\n          }\n        }\n        \n        // 使用降级数据\n        return getFallbackPlayers();\n      }\n    } catch (error) {\n      console.error(`获取队员列表异常 (第${i + 1}次尝试):`, error)\n      lastError = error;\n      \n      if (i < maxRetries - 1) {\n        console.log(`等待 ${(i + 1) * 2} 秒后重试...`);\n        await new Promise(resolve => setTimeout(resolve, (i + 1) * 2000));\n      }\n    }\n  }\n  \n  // 所有重试都失败，使用降级数据\n  console.error('所有重试都失败，使用降级数据');\n  uni.showToast({\n    title: '网络异常，使用离线数据',\n    icon: 'none',\n    duration: 3000\n  });\n  return getFallbackPlayers();\n}\n\n// 降级数据：默认队员列表\nfunction getFallbackPlayers() {\n  return ['言志', '小鲁', '建华', '汪骏', '杭宁'];\n}\n\n// 初始化默认队员\nexport async function initPlayers() {\n  const maxRetries = 2; // 初始化只重试2次\n  \n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      console.log(`初始化队员... (第${i + 1}次尝试)`)\n      const result = await uniCloud.callFunction({\n        name: 'badminton-api',\n        data: {\n          action: 'initPlayers'\n        }\n      })\n      \n      console.log('初始化队员结果:', result)\n      \n      if (result.result.code === 0) {\n        return true;\n      } else {\n        console.error('初始化队员失败:', result.result.message);\n        \n        // 如果是数据库资源耗尽错误，等待后重试\n        if (result.result.message && result.result.message.includes('资源耗尽')) {\n          if (i < maxRetries - 1) {\n            console.log(`数据库资源耗尽，等待 ${(i + 1) * 3} 秒后重试...`);\n            await new Promise(resolve => setTimeout(resolve, (i + 1) * 3000));\n            continue;\n          }\n        }\n        \n        return false;\n      }\n    } catch (error) {\n      console.error(`初始化队员异常 (第${i + 1}次尝试):`, error)\n      \n      if (i < maxRetries - 1) {\n        console.log(`等待 ${(i + 1) * 3} 秒后重试...`);\n        await new Promise(resolve => setTimeout(resolve, (i + 1) * 3000));\n      }\n    }\n  }\n  \n  console.error('初始化队员失败，所有重试都失败');\n  return false;\n}\n\n// 添加队员\nexport async function addPlayer(name, avatar = '') {\n  try {\n    const result = await uniCloud.callFunction({\n      name: 'badminton-api',\n      data: {\n        action: 'addPlayer',\n        data: { name, avatar }\n      }\n    })\n    \n    return result.result.code === 0\n  } catch (error) {\n    console.error('添加队员失败:', error)\n    return false\n  }\n}\n\n// 获取单打比赛记录\nexport async function getSingleMatches(timeRange = 'all') {\n  try {\n    const result = await uniCloud.callFunction({\n      name: 'badminton-api',\n      data: {\n        action: 'getSingleMatches',\n        data: { timeRange }\n      }\n    })\n    \n    if (result.result.code === 0) {\n      return result.result.data\n    } else {\n      console.error('获取单打比赛记录失败:', result.result.message)\n      return []\n    }\n  } catch (error) {\n    console.error('获取单打比赛记录异常:', error)\n    return []\n  }\n}\n\n// 保存单打比赛记录\nexport async function saveSingleMatch(match) {\n  try {\n    const result = await uniCloud.callFunction({\n      name: 'badminton-api',\n      data: {\n        action: 'submitSingleMatch',\n        data: match\n      }\n    })\n    \n    if (result.result.code === 0) {\n      return { id: result.result.data.match_id, ...match }\n    } else {\n      console.error('保存单打比赛记录失败:', result.result.message)\n      return null\n    }\n  } catch (error) {\n    console.error('保存单打比赛记录异常:', error)\n    return null\n  }\n}\n\n// 获取双打比赛记录\nexport async function getDoubleMatches(timeRange = 'all') {\n  try {\n    const result = await uniCloud.callFunction({\n      name: 'badminton-api',\n      data: {\n        action: 'getDoubleMatches',\n        data: { timeRange }\n      }\n    })\n    \n    if (result.result.code === 0) {\n      return result.result.data\n    } else {\n      console.error('获取双打比赛记录失败:', result.result.message)\n      return []\n    }\n  } catch (error) {\n    console.error('获取双打比赛记录异常:', error)\n    return []\n  }\n}\n\n// 保存双打比赛记录\nexport async function saveDoubleMatch(match) {\n  try {\n    const result = await uniCloud.callFunction({\n      name: 'badminton-api',\n      data: {\n        action: 'submitDoubleMatch',\n        data: match\n      }\n    })\n    \n    if (result.result.code === 0) {\n      return { id: result.result.data.match_id, ...match }\n    } else {\n      console.error('保存双打比赛记录失败:', result.result.message)\n      return null\n    }\n  } catch (error) {\n    console.error('保存双打比赛记录异常:', error)\n    return null\n  }\n}\n\n// 获取单打统计数据\nexport async function getSingleStats(timeRange = 'all') {\n  try {\n    const result = await uniCloud.callFunction({\n      name: 'badminton-api',\n      data: {\n        action: 'getSingleStats',\n        data: { timeRange }\n      }\n    })\n    \n    if (result.result.code === 0) {\n      return result.result.data\n    } else {\n      console.error('获取单打统计数据失败:', result.result.message)\n      return { stats: {}, matches: [] }\n    }\n  } catch (error) {\n    console.error('获取单打统计数据异常:', error)\n    return { stats: {}, matches: [] }\n  }\n}\n\n// 获取双打统计数据\nexport async function getDoubleStats(timeRange = 'all') {\n  try {\n    const result = await uniCloud.callFunction({\n      name: 'badminton-api',\n      data: {\n        action: 'getDoubleStats',\n        data: { timeRange }\n      }\n    })\n    \n    if (result.result.code === 0) {\n      return result.result.data\n    } else {\n      console.error('获取双打统计数据失败:', result.result.message)\n      return { stats: {}, matches: [] }\n    }\n  } catch (error) {\n    console.error('获取双打统计数据异常:', error)\n    return { stats: {}, matches: [] }\n  }\n}\n"],"names":["uni","uniCloud"],"mappings":"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"}