{"version":3,"file":"storage.js","sources":["utils/storage.js"],"sourcesContent":["/**\n * 本地存储工具类\n */\n\n// 队员数据\nexport const PLAYERS_KEY = 'badminton_players'\n// 单打比赛记录\nexport const SINGLE_MATCHES_KEY = 'badminton_single_matches'\n// 双打比赛记录\nexport const DOUBLE_MATCHES_KEY = 'badminton_double_matches'\n\n// 获取队员列表\nexport function getPlayers() {\n  try {\n    const players = uni.getStorageSync(PLAYERS_KEY)\n    return players || ['吉志', '小鲁', '建华', '汪骏', '杭宁']\n  } catch (e) {\n    return ['吉志', '小鲁', '建华', '汪骏', '杭宁']\n  }\n}\n\n// 保存队员列表\nexport function savePlayers(players) {\n  try {\n    uni.setStorageSync(PLAYERS_KEY, players)\n  } catch (e) {\n    console.error('保存队员失败:', e)\n  }\n}\n\n// 获取单打比赛记录\nexport function getSingleMatches() {\n  try {\n    const matches = uni.getStorageSync(SINGLE_MATCHES_KEY)\n    return matches || []\n  } catch (e) {\n    return []\n  }\n}\n\n// 保存单打比赛记录\nexport function saveSingleMatch(match) {\n  try {\n    const matches = getSingleMatches()\n    const newMatch = {\n      id: Date.now(),\n      date: new Date().toISOString().split('T')[0],\n      player1: match.player1,\n      player2: match.player2,\n      score1: match.score1,\n      score2: match.score2,\n      winner: match.score1 > match.score2 ? match.player1 : match.player2,\n      timestamp: Date.now()\n    }\n    matches.unshift(newMatch)\n    uni.setStorageSync(SINGLE_MATCHES_KEY, matches)\n    return newMatch\n  } catch (e) {\n    console.error('保存单打比赛记录失败:', e)\n    return null\n  }\n}\n\n// 获取双打比赛记录\nexport function getDoubleMatches() {\n  try {\n    const matches = uni.getStorageSync(DOUBLE_MATCHES_KEY)\n    return matches || []\n  } catch (e) {\n    return []\n  }\n}\n\n// 保存双打比赛记录\nexport function saveDoubleMatch(match) {\n  try {\n    const matches = getDoubleMatches()\n    const newMatch = {\n      id: Date.now(),\n      date: new Date().toISOString().split('T')[0],\n      teamA: match.teamA,\n      teamB: match.teamB,\n      scoreA: match.scoreA,\n      scoreB: match.scoreB,\n      winner: match.scoreA > match.scoreB ? 'A' : 'B',\n      timestamp: Date.now()\n    }\n    matches.unshift(newMatch)\n    uni.setStorageSync(DOUBLE_MATCHES_KEY, matches)\n    return newMatch\n  } catch (e) {\n    console.error('保存双打比赛记录失败:', e)\n    return null\n  }\n}\n\n// 获取单打统计数据\nexport function getSingleStats(timeRange = 'all') {\n  const matches = getSingleMatches()\n  const players = getPlayers()\n  const now = new Date()\n  let filteredMatches = matches\n  \n  // 根据时间范围过滤\n  if (timeRange !== 'all') {\n    const startDate = new Date()\n    switch(timeRange) {\n      case 'today':\n        startDate.setHours(0, 0, 0, 0)\n        break\n      case 'yesterday':\n        startDate.setDate(startDate.getDate() - 1)\n        startDate.setHours(0, 0, 0, 0)\n        break\n      case 'thisMonth':\n        startDate.setDate(1)\n        startDate.setHours(0, 0, 0, 0)\n        break\n      case 'lastMonth':\n        startDate.setMonth(startDate.getMonth() - 1)\n        startDate.setDate(1)\n        startDate.setHours(0, 0, 0, 0)\n        const endDate = new Date(startDate)\n        endDate.setMonth(endDate.getMonth() + 1)\n        endDate.setDate(0)\n        endDate.setHours(23, 59, 59, 999)\n        filteredMatches = matches.filter(match => {\n          const matchDate = new Date(match.date)\n          return matchDate >= startDate && matchDate <= endDate\n        })\n        break\n    }\n    \n    if (timeRange !== 'lastMonth') {\n      filteredMatches = matches.filter(match => {\n        const matchDate = new Date(match.date)\n        return matchDate >= startDate\n      })\n    }\n  }\n  \n  const stats = {}\n  \n  players.forEach(player => {\n    stats[player] = {\n      totalScore: 0,\n      wins: 0,\n      losses: 0,\n      totalMatches: 0\n    }\n  })\n  \n  filteredMatches.forEach(match => {\n    if (stats[match.player1]) {\n      stats[match.player1].totalScore += match.score1\n      stats[match.player1].totalMatches++\n      if (match.winner === match.player1) {\n        stats[match.player1].wins++\n      } else {\n        stats[match.player1].losses++\n      }\n    }\n    \n    if (stats[match.player2]) {\n      stats[match.player2].totalScore += match.score2\n      stats[match.player2].totalMatches++\n      if (match.winner === match.player2) {\n        stats[match.player2].wins++\n      } else {\n        stats[match.player2].losses++\n      }\n    }\n  })\n  \n  return {\n    stats,\n    matches: filteredMatches\n  }\n}\n"],"names":["uni"],"mappings":"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"}