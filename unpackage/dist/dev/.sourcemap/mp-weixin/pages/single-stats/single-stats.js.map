{"version":3,"file":"single-stats.js","sources":["pages/single-stats/single-stats.vue","pages/single-stats/single-stats.vue?type=page"],"sourcesContent":["<template>\n  <view class=\"container\">\n    <!-- 时间筛选 -->\n    <view class=\"time-filter\">\n      <view \n        v-for=\"(item, index) in timeOptions\" \n        :key=\"index\"\n        class=\"time-item\"\n        :class=\"{ active: currentTimeRange === item.value }\"\n        @click=\"changeTimeRange(item.value)\"\n      >\n        <text>{{ item.label }}</text>\n      </view>\n    </view>\n\n    <!-- 日期范围显示 -->\n    <view class=\"date-range\">\n      <text>日期范围</text>\n      <text class=\"date-text\">{{ dateRangeText }}</text>\n    </view>\n\n    <!-- 数据统计 -->\n    <view class=\"stats-section\">\n      <text class=\"section-title\">数据统计</text>\n      <view class=\"stats-table\">\n        <view class=\"stats-header\">\n          <text class=\"header-cell\" @click=\"sortBy('name')\">\n            队员 {{ getSortIcon('name') }}\n          </text>\n          <text class=\"header-cell\" @click=\"sortBy('totalScore')\">\n            总分 {{ getSortIcon('totalScore') }}\n          </text>\n          <text class=\"header-cell\" @click=\"sortBy('wins')\">\n            胜场 {{ getSortIcon('wins') }}\n          </text>\n          <text class=\"header-cell\" @click=\"sortBy('totalMatches')\">\n            总场次 {{ getSortIcon('totalMatches') }}\n          </text>\n          <text class=\"header-cell\" @click=\"sortBy('winRate')\">\n            胜率 {{ getSortIcon('winRate') }}\n          </text>\n          <text class=\"header-cell\" @click=\"sortBy('avgScore')\">\n            平均分 {{ getSortIcon('avgScore') }}\n          </text>\n        </view>\n        <view \n          v-for=\"player in sortedStats\" \n          :key=\"player.name\"\n          class=\"stats-row\"\n        >\n          <text class=\"cell\">{{ player.name }}</text>\n          <text class=\"cell\">{{ player.totalScore }}</text>\n          <text class=\"cell\">{{ player.wins }}</text>\n          <text class=\"cell\">{{ player.totalMatches }}</text>\n          <text class=\"cell\">{{ player.winRate }}</text>\n          <text class=\"cell\">{{ player.avgScore }}</text>\n        </view>\n      </view>\n    </view>\n\n    <!-- 单打对战记录 -->\n    <view class=\"matches-section\">\n      <text class=\"section-title\">单打对战记录：{{ currentMatches.length }}条</text>\n      <view class=\"matches-list\">\n        <view v-if=\"currentMatches.length === 0\" class=\"no-data\">\n          <text>暂无数据</text>\n        </view>\n        <view v-else>\n          <view class=\"matches-header\">\n            <text class=\"match-header-cell\">日期</text>\n            <text class=\"match-header-cell\">对战</text>\n            <text class=\"match-header-cell\">比分</text>\n          </view>\n          <view \n            v-for=\"match in currentMatches\" \n            :key=\"match.id\"\n            class=\"match-row\"\n          >\n            <text class=\"match-cell\">{{ formatDate(match.time) }}</text>\n            <text class=\"match-cell\">{{ match.player1 }}-{{ match.player2 }}</text>\n            <text class=\"match-cell\">{{ match.score1 }} - {{ match.score2 }}</text>\n          </view>\n        </view>\n      </view>\n    </view>\n    \n  </view>\n</template>\n\n<script>\nimport { getSingleStats, getSingleMatches } from '@/utils/storage.js'\n\nexport default {\n  data() {\n    return {\n      currentTimeRange: 'thisMonth',\n      timeOptions: [\n        { label: '历史所有', value: 'all' },\n        { label: '上月', value: 'lastMonth' },\n        { label: '昨日', value: 'yesterday' },\n        { label: '今日', value: 'today' },\n        { label: '当月', value: 'thisMonth' }\n      ],\n      statsData: {},\n      currentMatches: [],\n      sortField: 'totalScore',\n      sortOrder: 'desc'\n    }\n  },\n  \n  onLoad() {\n    this.loadData()\n  },\n  \n  onShow() {\n    this.loadData()\n  },\n  \n  computed: {\n    dateRangeText() {\n      const now = new Date()\n      switch(this.currentTimeRange) {\n        case 'today':\n          return now.toISOString().split('T')[0]\n        case 'yesterday':\n          const yesterday = new Date(now)\n          yesterday.setDate(yesterday.getDate() - 1)\n          return yesterday.toISOString().split('T')[0]\n        case 'thisMonth':\n          const year = now.getFullYear()\n          const month = String(now.getMonth() + 1).padStart(2, '0')\n          const lastDay = new Date(year, now.getMonth() + 1, 0).getDate()\n          return `${year}-${month}-01 至 ${year}-${month}-${String(lastDay).padStart(2, '0')}`\n        case 'lastMonth':\n          const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1)\n          const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0)\n          return `${lastMonth.toISOString().split('T')[0]} 至 ${lastMonthEnd.toISOString().split('T')[0]}`\n        case 'all':\n        default:\n          return '全部时间'\n      }\n    },\n    \n    sortedStats() {\n      const stats = []\n      Object.keys(this.statsData).forEach(playerName => {\n        const playerStats = this.statsData[playerName]\n        const winRate = playerStats.totalMatches > 0 \n          ? ((playerStats.wins / playerStats.totalMatches) * 100).toFixed(1) + '%'\n          : '0.0%'\n        const avgScore = playerStats.totalMatches > 0\n          ? (playerStats.totalScore / playerStats.totalMatches).toFixed(1)\n          : '0.0'\n        \n        stats.push({\n          name: playerName,\n          totalScore: playerStats.totalScore,\n          wins: playerStats.wins,\n          losses: playerStats.losses,\n          totalMatches: playerStats.totalMatches,\n          winRate,\n          avgScore\n        })\n      })\n      \n      // 按选定字段排序\n      return stats.sort((a, b) => {\n        let aVal = a[this.sortField]\n        let bVal = b[this.sortField]\n        \n        // 处理百分比字段（去除%符号进行数值比较）\n        if (this.sortField === 'winRate') {\n          aVal = parseFloat(aVal.replace('%', ''))\n          bVal = parseFloat(bVal.replace('%', ''))\n        }\n        // 处理数值字段\n        else if (typeof aVal === 'string' && !isNaN(parseFloat(aVal))) {\n          aVal = parseFloat(aVal)\n          bVal = parseFloat(bVal)\n        }\n        // 处理字符串字段\n        else if (typeof aVal === 'string') {\n          return this.sortOrder === 'desc' \n            ? bVal.localeCompare(aVal, 'zh-CN') \n            : aVal.localeCompare(bVal, 'zh-CN')\n        }\n        \n        // 数值比较\n        return this.sortOrder === 'desc' ? bVal - aVal : aVal - bVal\n      })\n    }\n  },\n  \n  onLoad() {\n    this.loadData()\n  },\n  \n  onShow() {\n    this.loadData()\n  },\n  \n  methods: {\n    async loadData() {\n      try {\n        const result = await getSingleStats(this.currentTimeRange)\n        this.statsData = result.stats\n        this.currentMatches = result.matches\n      } catch (error) {\n        console.error('加载数据失败:', error)\n        uni.showToast({\n          title: '加载失败',\n          icon: 'error'\n        })\n      }\n    },\n    \n    changeTimeRange(range) {\n      this.currentTimeRange = range\n      this.loadData()\n    },\n    \n    sortBy(field) {\n      if (this.sortField === field) {\n        // 如果点击同一字段，切换排序方向\n        this.sortOrder = this.sortOrder === 'desc' ? 'asc' : 'desc'\n      } else {\n        // 如果点击不同字段，设置新字段并默认降序\n        this.sortField = field\n        this.sortOrder = 'desc'\n      }\n    },\n    \n    getSortIcon(field) {\n      if (this.sortField !== field) {\n        return '↕' // 默认双箭头\n      }\n      return this.sortOrder === 'desc' ? '↓' : '↑'\n    },\n    \n    formatDate(dateValue) {\n      let date\n      if (typeof dateValue === 'number') {\n        // 时间戳\n        date = new Date(dateValue * 1000)\n      } else if (typeof dateValue === 'string') {\n        // 日期字符串\n        date = new Date(dateValue)\n      } else {\n        return '--'\n      }\n      \n      if (isNaN(date.getTime())) {\n        return '--'\n      }\n      \n      const month = String(date.getMonth() + 1).padStart(2, '0')\n      const day = String(date.getDate()).padStart(2, '0')\n      return `${month}-${day}`\n    }\n  }\n}\n</script>\n\n<style scoped>\n.container {\n  padding: 32rpx;\n  background-color: #f5f5f5;\n  min-height: 100vh;\n}\n\n.time-filter {\n  display: flex;\n  background: white;\n  border-radius: 16rpx;\n  padding: 8rpx;\n  margin-bottom: 32rpx;\n  box-shadow: 0 4rpx 16rpx rgba(0,0,0,0.1);\n}\n\n.time-item {\n  flex: 1;\n  text-align: center;\n  padding: 16rpx 8rpx;\n  border-radius: 12rpx;\n  font-size: 24rpx;\n}\n\n.time-item.active {\n  background: #4CAF50;\n  color: white;\n}\n\n.time-item:not(.active) {\n  color: #666;\n}\n\n.date-range {\n  background: white;\n  border-radius: 16rpx;\n  padding: 32rpx;\n  margin-bottom: 32rpx;\n  box-shadow: 0 4rpx 16rpx rgba(0,0,0,0.1);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.date-range text:first-child {\n  font-size: 28rpx;\n  color: #333;\n}\n\n.date-text {\n  font-size: 24rpx;\n  color: #666;\n}\n\n.stats-section {\n  margin-bottom: 48rpx;\n}\n\n.section-title {\n  font-size: 32rpx;\n  font-weight: bold;\n  color: #333;\n  margin-bottom: 24rpx;\n  display: block;\n}\n\n.stats-table {\n  background: white;\n  border-radius: 16rpx;\n  overflow: hidden;\n  box-shadow: 0 4rpx 16rpx rgba(0,0,0,0.1);\n}\n\n.stats-header {\n  display: flex;\n  background: #f8f8f8;\n  padding: 24rpx 16rpx;\n}\n\n.header-cell {\n  flex: 1;\n  text-align: center;\n  font-size: 22rpx;\n  color: #666;\n  font-weight: bold;\n  min-width: 0;\n  cursor: pointer;\n  user-select: none;\n  transition: all 0.2s ease;\n}\n\n.header-cell:hover {\n  background: rgba(0,0,0,0.05);\n  border-radius: 8rpx;\n}\n\n.header-cell:active {\n  background: rgba(0,0,0,0.1);\n}\n\n.stats-row {\n  display: flex;\n  padding: 24rpx 16rpx;\n  border-bottom: 2rpx solid #f0f0f0;\n}\n\n.stats-row:last-child {\n  border-bottom: none;\n}\n\n.cell {\n  flex: 1;\n  text-align: center;\n  font-size: 24rpx;\n  color: #333;\n  min-width: 0;\n}\n\n.matches-section {\n  margin-bottom: 48rpx;\n}\n\n.matches-list {\n  background: white;\n  border-radius: 16rpx;\n  overflow: hidden;\n  box-shadow: 0 4rpx 16rpx rgba(0,0,0,0.1);\n}\n\n.no-data {\n  padding: 80rpx;\n  text-align: center;\n  color: #999;\n}\n\n.matches-header {\n  display: flex;\n  background: #f8f8f8;\n  padding: 24rpx 32rpx;\n}\n\n.match-header-cell {\n  flex: 1;\n  text-align: center;\n  font-size: 24rpx;\n  color: #666;\n  font-weight: bold;\n}\n\n.match-row {\n  display: flex;\n  padding: 24rpx 32rpx;\n  border-bottom: 2rpx solid #f0f0f0;\n}\n\n.match-row:last-child {\n  border-bottom: none;\n}\n\n.match-cell {\n  flex: 1;\n  text-align: center;\n  font-size: 26rpx;\n  color: #333;\n}\n</style>\n","import MiniProgramPage from '/Users/wangjun/netease/mine/Scoring/score-uniapp/pages/single-stats/single-stats.vue'\nwx.createPage(MiniProgramPage)"],"names":["getSingleStats","uni"],"mappings":";;;AA4FA,MAAK,YAAU;AAAA,EACb,OAAO;AACL,WAAO;AAAA,MACL,kBAAkB;AAAA,MAClB,aAAa;AAAA,QACX,EAAE,OAAO,QAAQ,OAAO,MAAO;AAAA,QAC/B,EAAE,OAAO,MAAM,OAAO,YAAa;AAAA,QACnC,EAAE,OAAO,MAAM,OAAO,YAAa;AAAA,QACnC,EAAE,OAAO,MAAM,OAAO,QAAS;AAAA,QAC/B,EAAE,OAAO,MAAM,OAAO,YAAY;AAAA,MACnC;AAAA,MACD,WAAW,CAAE;AAAA,MACb,gBAAgB,CAAE;AAAA,MAClB,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACD;AAAA,EAED,SAAS;AACP,SAAK,SAAS;AAAA,EACf;AAAA,EAED,SAAS;AACP,SAAK,SAAS;AAAA,EACf;AAAA,EAED,UAAU;AAAA,IACR,gBAAgB;AACd,YAAM,MAAM,oBAAI,KAAK;AACrB,cAAO,KAAK,kBAAgB;AAAA,QAC1B,KAAK;AACH,iBAAO,IAAI,YAAa,EAAC,MAAM,GAAG,EAAE,CAAC;AAAA,QACvC,KAAK;AACH,gBAAM,YAAY,IAAI,KAAK,GAAG;AAC9B,oBAAU,QAAQ,UAAU,QAAO,IAAK,CAAC;AACzC,iBAAO,UAAU,YAAa,EAAC,MAAM,GAAG,EAAE,CAAC;AAAA,QAC7C,KAAK;AACH,gBAAM,OAAO,IAAI,YAAY;AAC7B,gBAAM,QAAQ,OAAO,IAAI,SAAQ,IAAK,CAAC,EAAE,SAAS,GAAG,GAAG;AACxD,gBAAM,UAAU,IAAI,KAAK,MAAM,IAAI,SAAQ,IAAK,GAAG,CAAC,EAAE,QAAQ;AAC9D,iBAAO,GAAG,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,OAAO,OAAO,EAAE,SAAS,GAAG,GAAG,CAAC;AAAA,QACnF,KAAK;AACH,gBAAM,YAAY,IAAI,KAAK,IAAI,eAAe,IAAI,SAAQ,IAAK,GAAG,CAAC;AACnE,gBAAM,eAAe,IAAI,KAAK,IAAI,YAAW,GAAI,IAAI,SAAU,GAAE,CAAC;AAClE,iBAAO,GAAG,UAAU,YAAa,EAAC,MAAM,GAAG,EAAE,CAAC,CAAC,MAAM,aAAa,cAAc,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,QAC/F,KAAK;AAAA,QACL;AACE,iBAAO;AAAA,MACX;AAAA,IACD;AAAA,IAED,cAAc;AACZ,YAAM,QAAQ,CAAC;AACf,aAAO,KAAK,KAAK,SAAS,EAAE,QAAQ,gBAAc;AAChD,cAAM,cAAc,KAAK,UAAU,UAAU;AAC7C,cAAM,UAAU,YAAY,eAAe,KACrC,YAAY,OAAO,YAAY,eAAgB,KAAK,QAAQ,CAAC,IAAI,MACnE;AACJ,cAAM,WAAW,YAAY,eAAe,KACvC,YAAY,aAAa,YAAY,cAAc,QAAQ,CAAC,IAC7D;AAEJ,cAAM,KAAK;AAAA,UACT,MAAM;AAAA,UACN,YAAY,YAAY;AAAA,UACxB,MAAM,YAAY;AAAA,UAClB,QAAQ,YAAY;AAAA,UACpB,cAAc,YAAY;AAAA,UAC1B;AAAA,UACA;AAAA,SACD;AAAA,OACF;AAGD,aAAO,MAAM,KAAK,CAAC,GAAG,MAAM;AAC1B,YAAI,OAAO,EAAE,KAAK,SAAS;AAC3B,YAAI,OAAO,EAAE,KAAK,SAAS;AAG3B,YAAI,KAAK,cAAc,WAAW;AAChC,iBAAO,WAAW,KAAK,QAAQ,KAAK,EAAE,CAAC;AACvC,iBAAO,WAAW,KAAK,QAAQ,KAAK,EAAE,CAAC;AAAA,QACzC,WAES,OAAO,SAAS,YAAY,CAAC,MAAM,WAAW,IAAI,CAAC,GAAG;AAC7D,iBAAO,WAAW,IAAI;AACtB,iBAAO,WAAW,IAAI;AAAA,QACxB,WAES,OAAO,SAAS,UAAU;AACjC,iBAAO,KAAK,cAAc,SACtB,KAAK,cAAc,MAAM,OAAO,IAChC,KAAK,cAAc,MAAM,OAAO;AAAA,QACtC;AAGA,eAAO,KAAK,cAAc,SAAS,OAAO,OAAO,OAAO;AAAA,OACzD;AAAA,IACH;AAAA,EACD;AAAA,EAED,SAAS;AACP,SAAK,SAAS;AAAA,EACf;AAAA,EAED,SAAS;AACP,SAAK,SAAS;AAAA,EACf;AAAA,EAED,SAAS;AAAA,IACP,MAAM,WAAW;AACf,UAAI;AACF,cAAM,SAAS,MAAMA,6BAAe,KAAK,gBAAgB;AACzD,aAAK,YAAY,OAAO;AACxB,aAAK,iBAAiB,OAAO;AAAA,MAC7B,SAAO,OAAO;AACdC,sBAAAA,MAAA,MAAA,SAAA,8CAAc,WAAW,KAAK;AAC9BA,sBAAAA,MAAI,UAAU;AAAA,UACZ,OAAO;AAAA,UACP,MAAM;AAAA,SACP;AAAA,MACH;AAAA,IACD;AAAA,IAED,gBAAgB,OAAO;AACrB,WAAK,mBAAmB;AACxB,WAAK,SAAS;AAAA,IACf;AAAA,IAED,OAAO,OAAO;AACZ,UAAI,KAAK,cAAc,OAAO;AAE5B,aAAK,YAAY,KAAK,cAAc,SAAS,QAAQ;AAAA,aAChD;AAEL,aAAK,YAAY;AACjB,aAAK,YAAY;AAAA,MACnB;AAAA,IACD;AAAA,IAED,YAAY,OAAO;AACjB,UAAI,KAAK,cAAc,OAAO;AAC5B,eAAO;AAAA,MACT;AACA,aAAO,KAAK,cAAc,SAAS,MAAM;AAAA,IAC1C;AAAA,IAED,WAAW,WAAW;AACpB,UAAI;AACJ,UAAI,OAAO,cAAc,UAAU;AAEjC,eAAO,IAAI,KAAK,YAAY,GAAI;AAAA,MAClC,WAAW,OAAO,cAAc,UAAU;AAExC,eAAO,IAAI,KAAK,SAAS;AAAA,aACpB;AACL,eAAO;AAAA,MACT;AAEA,UAAI,MAAM,KAAK,QAAO,CAAE,GAAG;AACzB,eAAO;AAAA,MACT;AAEA,YAAM,QAAQ,OAAO,KAAK,SAAQ,IAAK,CAAC,EAAE,SAAS,GAAG,GAAG;AACzD,YAAM,MAAM,OAAO,KAAK,QAAS,CAAA,EAAE,SAAS,GAAG,GAAG;AAClD,aAAO,GAAG,KAAK,IAAI,GAAG;AAAA,IACxB;AAAA,EACF;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnQA,GAAG,WAAW,eAAe;"}