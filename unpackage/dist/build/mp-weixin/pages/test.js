"use strict";const t=require("../common/vendor.js"),e=require("../utils/storage.js"),s={data:()=>({result:"点击按钮开始测试...",players:[]}),methods:{async testInitPlayers(){try{this.result="正在初始化队员...";const t=await e.initPlayers();this.result="初始化结果: "+(t?"成功":"失败"),console.log("初始化结果:",t)}catch(t){this.result=`初始化失败: ${t.message}`,console.error("初始化失败:",t)}},async testGetPlayers(){try{this.result="正在获取队员列表...",this.players=await e.getPlayers(),this.result=`获取到 ${this.players.length} 个队员`,console.log("获取到的队员:",this.players)}catch(t){this.result=`获取失败: ${t.message}`,console.error("获取队员失败:",t)}},async testSubmitMatch(){try{this.result="正在测试提交比赛...";const e=await t.tr.callFunction({name:"badminton-api",data:{action:"submitSingleMatch",data:{player1:"言志",player2:"小鲁",score1:21,score2:19,match_name:"测试比赛"}}});console.log("提交比赛结果:",e),this.result=`提交比赛结果: ${JSON.stringify(e.result,null,2)}`}catch(e){this.result=`提交比赛失败: ${e.message}`,console.error("提交比赛失败:",e)}},async testGetMatches(){try{this.result="正在测试获取比赛记录...";const e=await t.tr.callFunction({name:"badminton-api",data:{action:"getSingleMatches",data:{timeRange:"all",limit:5}}});console.log("获取比赛记录结果:",e),0===e.result.code&&(console.log("比赛数据:",e.result.data),e.result.data.forEach((t=>{console.log("比赛时间戳:",t.time),console.log("比赛日期字符串:",t.date);const e=new Date(1e3*t.time);console.log("转换后的日期:",e.toLocaleString())}))),this.result=`获取比赛记录结果: ${JSON.stringify(e.result,null,2)}`}catch(e){this.result=`获取比赛记录失败: ${e.message}`,console.error("获取比赛记录失败:",e)}},async testErrorHandling(){try{this.result="正在测试错误处理机制...";const e=await t.tr.callFunction({name:"badminton-api",data:{action:"getPlayers"}});console.log("错误处理测试结果:",e),-1===e.result.code?this.result=`检测到错误: ${e.result.message}\n\n错误处理机制:\n1. 自动重试3次\n2. 使用降级数据\n3. 显示用户友好提示`:this.result=`正常返回: ${JSON.stringify(e.result,null,2)}`}catch(e){this.result=`异常捕获: ${e.message}\n\n系统将自动使用降级数据`,console.error("错误处理测试异常:",e)}},async testDatabaseFix(){try{this.result="正在测试数据库操作修复...";const e=await t.tr.callFunction({name:"badminton-api",data:{action:"getPlayers"}});console.log("获取队员列表结果:",e),0===e.result.code?this.result=`✅ 数据库操作修复成功！\n\n获取队员列表: ${e.result.data.length} 个队员\n\n修复内容:\n1. 所有数据库操作都使用重试机制\n2. 修复了 collection.where 错误\n3. 添加了资源耗尽处理\n4. 优化了错误提示`:this.result=`❌ 数据库操作仍有问题: ${e.result.message}`}catch(e){this.result=`❌ 测试异常: ${e.message}`,console.error("数据库修复测试异常:",e)}},async testTabStatus(){try{this.result="正在测试Tab状态修复...";const t=getCurrentPages(),e="/"+t[t.length-1].route;this.result=`✅ Tab状态修复完成！\n\n当前页面: ${e}\n\n修复内容:\n1. 添加了onShow生命周期监听\n2. 页面切换时自动更新tab状态\n3. 添加了ref引用和状态同步\n4. 优化了切换逻辑和错误处理\n\n请尝试切换不同页面，观察tab状态是否正确更新。`}catch(t){this.result=`❌ Tab状态测试异常: ${t.message}`,console.error("Tab状态测试异常:",t)}},async testCloudFunction(){try{this.result="正在测试云函数连接...";const e=await t.tr.callFunction({name:"badminton-api",data:{action:"getPlayers"}});console.log("云函数原始返回:",e),this.result=`云函数返回: ${JSON.stringify(e.result,null,2)}`}catch(e){this.result=`云函数调用失败: ${e.message}`,console.error("云函数调用失败:",e)}}}};if(!Array){t.resolveComponent("uni-icons")()}Math;const a=t._export_sfc(s,[["render",function(e,s,a,n,r,o){return t.e({a:t.o(((...t)=>o.testInitPlayers&&o.testInitPlayers(...t))),b:t.o(((...t)=>o.testGetPlayers&&o.testGetPlayers(...t))),c:t.o(((...t)=>o.testSubmitMatch&&o.testSubmitMatch(...t))),d:t.o(((...t)=>o.testGetMatches&&o.testGetMatches(...t))),e:t.o(((...t)=>o.testErrorHandling&&o.testErrorHandling(...t))),f:t.o(((...t)=>o.testDatabaseFix&&o.testDatabaseFix(...t))),g:t.o(((...t)=>o.testTabStatus&&o.testTabStatus(...t))),h:t.o(((...t)=>o.testCloudFunction&&o.testCloudFunction(...t))),i:t.p({type:"person",size:"30",color:"#007AFF"}),j:t.p({type:"person-filled",size:"30",color:"#007AFF"}),k:t.p({type:"stats",size:"30",color:"#4CAF50"}),l:t.p({type:"contact",size:"30",color:"#FF9800"}),m:t.p({type:"bar-chart",size:"30",color:"#9C27B0"}),n:t.t(r.result),o:r.players.length>0},r.players.length>0?{p:t.f(r.players,((e,s,a)=>({a:t.t(e),b:s})))}:{})}],["__scopeId","data-v-cff2d013"]]);wx.createPage(a);
